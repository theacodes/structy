/*
    Hey this file was generated by Structy on {{date}} from
    {{source}}. Maybe don't edit it!
*/

#include "{{source_stem}}.h"

#define _PACK_STRING "{{struct.pack_string}}"

void {{struct.name}}_init(struct {{struct.name}}* inst) {
    {%- for field in struct.fields: %}
    inst->{{field.name}} = {{field.kind.c_value(field.value)}};
    {%- endfor %}
}

struct StructyResult {{struct.name}}_pack(const struct {{struct.name}}* inst, uint8_t* buf) {
    return structy_pack(
        _PACK_STRING,
        buf,
        {{struct.name|upper}}_PACKED_SIZE,
        {%- for field in struct.fields: %}
        inst->{{field.name}}{% if not loop.last %},{% endif %}
        {%- endfor %}
    );
}

struct StructyResult {{struct.name}}_unpack(struct {{struct.name}}* inst, const uint8_t* buf) {
    return structy_unpack(
        _PACK_STRING,
        buf,
        {{struct.name|upper}}_PACKED_SIZE,
        {%- for field in struct.fields: %}
        &inst->{{field.name}}{% if not loop.last %},{% endif %}
        {%- endfor %}
    );
}

void {{struct.name}}_print(const struct {{struct.name}}* inst) {
    // TODO: Print pointer address.
    STRUCTY_PRINTF("Struct {{struct.name}}:\n");
    {%- for field in struct.fields: %}
    {{field.kind.c_printer(field.name)|indent()}}
    {%- endfor %}
}
